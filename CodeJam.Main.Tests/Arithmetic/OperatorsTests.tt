<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ include file="$(SolutionDir)Build\T4\Autogenerated.ttinclude" #>
<#@ include file="$(SolutionDir)CodeJam.Main\Arithmetic\Operators.ttinclude" #>
using System;

using NUnit.Framework;

using IntOp = CodeJam.Arithmetic.Operators<int>;
using NullableDoubleOp = CodeJam.Arithmetic.Operators<double?>;
using EnumOp = CodeJam.Arithmetic.Operators<System.AttributeTargets>;
using NullableEnumOp = CodeJam.Arithmetic.Operators<System.AttributeTargets?>;

namespace CodeJam.Arithmetic
{
	partial class OperatorsTests
	{
		private static AttributeTargets? NullableEnumA = AttributeTargets.Method;
		private static AttributeTargets? NullableEnumB = AttributeTargets.Class;
		private static AttributeTargets? NullableEnumC = null;

<#
	foreach (var op in ops)
	{
		WriteRegionLine(op.OpType.ToString(), "op.OpType");
		WriteRegionLine(op.Name, "op.Name");

		if (op.OpType == OpType.Unary)
		{
			EmitUnary(op);
		}
		else
		{
			EmitBinaryOrComparison(op);
		}
	}
	FlushRegions();
#>
	}
}<#+

	private void EmitUnary(OpInfo op)
	{
#>
		[Test]
		public void TestInt<#=op.Name#>() => Assert.AreEqual(<#=op.Sign#>42, IntOp.<#=op.Name#>(42));
<#+
		if (op.ForEnums)
		{
#>

		[Test]
		public void TestEnum<#=op.Name#>() =>
			Assert.AreEqual(<#=op.Sign#>NullableEnumA!.Value, EnumOp.<#=op.Name#>(NullableEnumA.Value));

		[Test]
		public void TestNullableEnum<#=op.Name#>()
		{
			Assert.AreEqual(<#=op.Sign#>NullableEnumA, NullableEnumOp.<#=op.Name#>(NullableEnumA));
			Assert.AreEqual(<#=op.Sign#>NullableEnumC, NullableEnumOp.<#=op.Name#>(NullableEnumC));
		}
<#+
		}
		if (!op.IntOnly)
		{
#>

		[Test]
		public void TestNullableDouble<#=op.Name#>() => Assert.AreEqual(<#=op.Sign#>42f, NullableDoubleOp.<#=op.Name#>(42f));
<#+
		}
	}

	private void EmitBinaryOrComparison(OpInfo op)
	{
#>
		[Test]
		public void TestInt<#=op.Name#>() => Assert.AreEqual(1 <#=op.Sign#> 2, IntOp.<#=op.Name#>(1, 2));
<#+
		if (op.ForEnums)
		{
#>

		[Test]
		public void TestEnum<#=op.Name#>() =>
			Assert.AreEqual(
				NullableEnumA!.Value <#=op.Sign#> NullableEnumB!.Value,
				EnumOp.<#=op.Name#>(NullableEnumA.Value, NullableEnumB.Value));

		[Test]
		public void TestNullableEnum<#=op.Name#>()
		{
			Assert.AreEqual(NullableEnumA <#=op.Sign#> NullableEnumB, NullableEnumOp.<#=op.Name#>(NullableEnumA, NullableEnumB));
			Assert.AreEqual(NullableEnumA <#=op.Sign#> NullableEnumC, NullableEnumOp.<#=op.Name#>(NullableEnumA, NullableEnumC));
		}
<#+
		}
		if (!op.IntOnly)
		{
#>

		[Test]
		public void TestNullableDouble<#=op.Name#>() => Assert.AreEqual(1f <#=op.Sign#> 2f, NullableDoubleOp.<#=op.Name#>(1, 2));
<#+
		}
	}#>
