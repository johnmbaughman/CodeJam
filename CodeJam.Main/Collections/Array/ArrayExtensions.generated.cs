//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System;

using JetBrains.Annotations;

namespace CodeJam.Collections
{
	partial class ArrayExtensions
	{
		#region byte
		/// <summary>
		/// Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
		/// </summary>
		/// <param name="a">The first array to compare.</param>
		/// <param name="b">The second array to compare.</param>
		/// <returns>True, if length and content of <paramref name="a"/> equals <paramref name="b"/>.</returns>
		[Pure]
		public static unsafe bool EqualsTo(this byte[]? a, byte[]? b)
		{
			if (a == b)
				return true;

			if (a == null || b == null)
				return false;

			if (a.Length != b.Length)
				return false;

			if (a.Length < 5)
			{
				for (var i = 0; i < a.Length; i++)
					if (a[i] != b[i])
						return false;

				return true;
			}

			fixed (void* pa = &a[0], pb = &b[0])
				return Memory.Compare((byte*)pa, (byte*)pb, a.Length * sizeof(byte));
		}
		#endregion

		#region sbyte
		/// <summary>
		/// Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
		/// </summary>
		/// <param name="a">The first array to compare.</param>
		/// <param name="b">The second array to compare.</param>
		/// <returns>True, if length and content of <paramref name="a"/> equals <paramref name="b"/>.</returns>
		[Pure]
		public static unsafe bool EqualsTo(this sbyte[]? a, sbyte[]? b)
		{
			if (a == b)
				return true;

			if (a == null || b == null)
				return false;

			if (a.Length != b.Length)
				return false;

			if (a.Length < 5)
			{
				for (var i = 0; i < a.Length; i++)
					if (a[i] != b[i])
						return false;

				return true;
			}

			fixed (void* pa = &a[0], pb = &b[0])
				return Memory.Compare((byte*)pa, (byte*)pb, a.Length * sizeof(sbyte));
		}
		#endregion

		#region short
		/// <summary>
		/// Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
		/// </summary>
		/// <param name="a">The first array to compare.</param>
		/// <param name="b">The second array to compare.</param>
		/// <returns>True, if length and content of <paramref name="a"/> equals <paramref name="b"/>.</returns>
		[Pure]
		public static unsafe bool EqualsTo(this short[]? a, short[]? b)
		{
			if (a == b)
				return true;

			if (a == null || b == null)
				return false;

			if (a.Length != b.Length)
				return false;

			if (a.Length < 5)
			{
				for (var i = 0; i < a.Length; i++)
					if (a[i] != b[i])
						return false;

				return true;
			}

			fixed (void* pa = &a[0], pb = &b[0])
				return Memory.Compare((byte*)pa, (byte*)pb, a.Length * sizeof(short));
		}
		#endregion

		#region ushort
		/// <summary>
		/// Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
		/// </summary>
		/// <param name="a">The first array to compare.</param>
		/// <param name="b">The second array to compare.</param>
		/// <returns>True, if length and content of <paramref name="a"/> equals <paramref name="b"/>.</returns>
		[Pure]
		public static unsafe bool EqualsTo(this ushort[]? a, ushort[]? b)
		{
			if (a == b)
				return true;

			if (a == null || b == null)
				return false;

			if (a.Length != b.Length)
				return false;

			if (a.Length < 5)
			{
				for (var i = 0; i < a.Length; i++)
					if (a[i] != b[i])
						return false;

				return true;
			}

			fixed (void* pa = &a[0], pb = &b[0])
				return Memory.Compare((byte*)pa, (byte*)pb, a.Length * sizeof(ushort));
		}
		#endregion

		#region int
		/// <summary>
		/// Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
		/// </summary>
		/// <param name="a">The first array to compare.</param>
		/// <param name="b">The second array to compare.</param>
		/// <returns>True, if length and content of <paramref name="a"/> equals <paramref name="b"/>.</returns>
		[Pure]
		public static unsafe bool EqualsTo(this int[]? a, int[]? b)
		{
			if (a == b)
				return true;

			if (a == null || b == null)
				return false;

			if (a.Length != b.Length)
				return false;

			if (a.Length < 5)
			{
				for (var i = 0; i < a.Length; i++)
					if (a[i] != b[i])
						return false;

				return true;
			}

			fixed (void* pa = &a[0], pb = &b[0])
				return Memory.Compare((byte*)pa, (byte*)pb, a.Length * sizeof(int));
		}
		#endregion

		#region uint
		/// <summary>
		/// Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
		/// </summary>
		/// <param name="a">The first array to compare.</param>
		/// <param name="b">The second array to compare.</param>
		/// <returns>True, if length and content of <paramref name="a"/> equals <paramref name="b"/>.</returns>
		[Pure]
		public static unsafe bool EqualsTo(this uint[]? a, uint[]? b)
		{
			if (a == b)
				return true;

			if (a == null || b == null)
				return false;

			if (a.Length != b.Length)
				return false;

			if (a.Length < 5)
			{
				for (var i = 0; i < a.Length; i++)
					if (a[i] != b[i])
						return false;

				return true;
			}

			fixed (void* pa = &a[0], pb = &b[0])
				return Memory.Compare((byte*)pa, (byte*)pb, a.Length * sizeof(uint));
		}
		#endregion

		#region long
		/// <summary>
		/// Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
		/// </summary>
		/// <param name="a">The first array to compare.</param>
		/// <param name="b">The second array to compare.</param>
		/// <returns>True, if length and content of <paramref name="a"/> equals <paramref name="b"/>.</returns>
		[Pure]
		public static unsafe bool EqualsTo(this long[]? a, long[]? b)
		{
			if (a == b)
				return true;

			if (a == null || b == null)
				return false;

			if (a.Length != b.Length)
				return false;

			if (a.Length < 5)
			{
				for (var i = 0; i < a.Length; i++)
					if (a[i] != b[i])
						return false;

				return true;
			}

			fixed (void* pa = &a[0], pb = &b[0])
				return Memory.Compare((byte*)pa, (byte*)pb, a.Length * sizeof(long));
		}
		#endregion

		#region ulong
		/// <summary>
		/// Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
		/// </summary>
		/// <param name="a">The first array to compare.</param>
		/// <param name="b">The second array to compare.</param>
		/// <returns>True, if length and content of <paramref name="a"/> equals <paramref name="b"/>.</returns>
		[Pure]
		public static unsafe bool EqualsTo(this ulong[]? a, ulong[]? b)
		{
			if (a == b)
				return true;

			if (a == null || b == null)
				return false;

			if (a.Length != b.Length)
				return false;

			if (a.Length < 5)
			{
				for (var i = 0; i < a.Length; i++)
					if (a[i] != b[i])
						return false;

				return true;
			}

			fixed (void* pa = &a[0], pb = &b[0])
				return Memory.Compare((byte*)pa, (byte*)pb, a.Length * sizeof(ulong));
		}
		#endregion

		#region TimeSpan
		/// <summary>
		/// Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
		/// </summary>
		/// <param name="a">The first array to compare.</param>
		/// <param name="b">The second array to compare.</param>
		/// <returns>True, if length and content of <paramref name="a"/> equals <paramref name="b"/>.</returns>
		[Pure]
		public static unsafe bool EqualsTo(this TimeSpan[]? a, TimeSpan[]? b)
		{
			if (a == b)
				return true;

			if (a == null || b == null)
				return false;

			if (a.Length != b.Length)
				return false;

			if (a.Length < 5)
			{
				for (var i = 0; i < a.Length; i++)
					if (a[i] != b[i])
						return false;

				return true;
			}

			fixed (void* pa = &a[0], pb = &b[0])
				return Memory.Compare((byte*)pa, (byte*)pb, a.Length * sizeof(TimeSpan));
		}
		#endregion

		#region Guid
		/// <summary>
		/// Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
		/// </summary>
		/// <param name="a">The first array to compare.</param>
		/// <param name="b">The second array to compare.</param>
		/// <returns>True, if length and content of <paramref name="a"/> equals <paramref name="b"/>.</returns>
		[Pure]
		public static unsafe bool EqualsTo(this Guid[]? a, Guid[]? b)
		{
			if (a == b)
				return true;

			if (a == null || b == null)
				return false;

			if (a.Length != b.Length)
				return false;

			if (a.Length == 0)
				return true;

			fixed (void* pa = &a[0], pb = &b[0])
				return Memory.Compare((byte*)pa, (byte*)pb, a.Length * sizeof(Guid));
		}
		#endregion
	}
}
